# coding: utf-8

"""
    ibl-data-manager

    API for iblai

    The version of the OpenAPI document: 3.54.3-ai-plus
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class CustomInstructionResponse(BaseModel):
    """
    CustomInstructionResponse
    """ # noqa: E501
    id: StrictInt
    about_user: Optional[StrictStr] = None
    mentor_tone: Optional[StrictStr] = None
    profession: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="Position or work. eg: Engineer, student etc.")
    desired_mentor_traits: Optional[StrictStr] = Field(default=None, description="Comma separated list of expected traits for mentor.")
    __properties: ClassVar[List[str]] = ["id", "about_user", "mentor_tone", "profession", "desired_mentor_traits"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomInstructionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if about_user (nullable) is None
        # and model_fields_set contains the field
        if self.about_user is None and "about_user" in self.model_fields_set:
            _dict['about_user'] = None

        # set to None if mentor_tone (nullable) is None
        # and model_fields_set contains the field
        if self.mentor_tone is None and "mentor_tone" in self.model_fields_set:
            _dict['mentor_tone'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomInstructionResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "about_user": obj.get("about_user"),
            "mentor_tone": obj.get("mentor_tone"),
            "profession": obj.get("profession"),
            "desired_mentor_traits": obj.get("desired_mentor_traits")
        })
        return _obj


