# coding: utf-8

"""
    ibl-data-manager

    API for iblai

    The version of the OpenAPI document: 3.54.3-ai-plus
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Document(BaseModel):
    """
    Serializer for document objects
    """ # noqa: E501
    id: StrictInt = Field(description="Document ID")
    document_name: StrictStr = Field(description="Name of the document")
    document_type: StrictStr = Field(description="Type of document (e.g., 'pdf', 'text')")
    access: StrictStr = Field(description="Access level of the document")
    training_status: StrictStr = Field(description="Training status of the document")
    date_created: datetime = Field(description="Date when the document was created")
    last_modified: datetime = Field(description="Date when the document was last modified")
    url: StrictStr = Field(description="URL to access the document")
    metadata: Optional[Any] = Field(description="Additional metadata for the document")
    __properties: ClassVar[List[str]] = ["id", "document_name", "document_type", "access", "training_status", "date_created", "last_modified", "url", "metadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Document from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Document from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "document_name": obj.get("document_name"),
            "document_type": obj.get("document_type"),
            "access": obj.get("access"),
            "training_status": obj.get("training_status"),
            "date_created": obj.get("date_created"),
            "last_modified": obj.get("last_modified"),
            "url": obj.get("url"),
            "metadata": obj.get("metadata")
        })
        return _obj


