# coding: utf-8

"""
    ibl-data-manager

    API for iblai

    The version of the OpenAPI document: 3.54.3-ai-plus
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MemoryProgress(BaseModel):
    """
    MemoryProgress
    """ # noqa: E501
    memory_type: StrictStr
    all_units: Optional[StrictInt]
    all_unit_names: Optional[List[StrictStr]]
    current_unit: Optional[StrictInt]
    current_unit_name: Optional[StrictStr]
    item_name: Optional[StrictStr]
    __properties: ClassVar[List[str]] = ["memory_type", "all_units", "all_unit_names", "current_unit", "current_unit_name", "item_name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MemoryProgress from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "memory_type",
            "all_units",
            "all_unit_names",
            "current_unit",
            "current_unit_name",
            "item_name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if all_units (nullable) is None
        # and model_fields_set contains the field
        if self.all_units is None and "all_units" in self.model_fields_set:
            _dict['all_units'] = None

        # set to None if all_unit_names (nullable) is None
        # and model_fields_set contains the field
        if self.all_unit_names is None and "all_unit_names" in self.model_fields_set:
            _dict['all_unit_names'] = None

        # set to None if current_unit (nullable) is None
        # and model_fields_set contains the field
        if self.current_unit is None and "current_unit" in self.model_fields_set:
            _dict['current_unit'] = None

        # set to None if current_unit_name (nullable) is None
        # and model_fields_set contains the field
        if self.current_unit_name is None and "current_unit_name" in self.model_fields_set:
            _dict['current_unit_name'] = None

        # set to None if item_name (nullable) is None
        # and model_fields_set contains the field
        if self.item_name is None and "item_name" in self.model_fields_set:
            _dict['item_name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MemoryProgress from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "memory_type": obj.get("memory_type"),
            "all_units": obj.get("all_units"),
            "all_unit_names": obj.get("all_unit_names"),
            "current_unit": obj.get("current_unit"),
            "current_unit_name": obj.get("current_unit_name"),
            "item_name": obj.get("item_name")
        })
        return _obj


