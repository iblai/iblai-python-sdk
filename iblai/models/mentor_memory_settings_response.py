# coding: utf-8

"""
    ibl-data-manager

    API for iblai

    The version of the OpenAPI document: 3.54.3-ai-plus
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class MentorMemorySettingsResponse(BaseModel):
    """
    MentorMemorySettingsResponse
    """ # noqa: E501
    item_type: Optional[StrictStr]
    item_identifier: Optional[StrictStr]
    learner_advance_correct_rate: Optional[Union[StrictFloat, StrictInt]] = None
    learner_advance_question_count: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["item_type", "item_identifier", "learner_advance_correct_rate", "learner_advance_question_count"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MentorMemorySettingsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "item_type",
            "item_identifier",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if item_type (nullable) is None
        # and model_fields_set contains the field
        if self.item_type is None and "item_type" in self.model_fields_set:
            _dict['item_type'] = None

        # set to None if item_identifier (nullable) is None
        # and model_fields_set contains the field
        if self.item_identifier is None and "item_identifier" in self.model_fields_set:
            _dict['item_identifier'] = None

        # set to None if learner_advance_correct_rate (nullable) is None
        # and model_fields_set contains the field
        if self.learner_advance_correct_rate is None and "learner_advance_correct_rate" in self.model_fields_set:
            _dict['learner_advance_correct_rate'] = None

        # set to None if learner_advance_question_count (nullable) is None
        # and model_fields_set contains the field
        if self.learner_advance_question_count is None and "learner_advance_question_count" in self.model_fields_set:
            _dict['learner_advance_question_count'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MentorMemorySettingsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "item_type": obj.get("item_type"),
            "item_identifier": obj.get("item_identifier"),
            "learner_advance_correct_rate": obj.get("learner_advance_correct_rate"),
            "learner_advance_question_count": obj.get("learner_advance_question_count")
        })
        return _obj


