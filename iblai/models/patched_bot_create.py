# coding: utf-8

"""
    ibl-data-manager

    API for iblai

    The version of the OpenAPI document: 3.54.3-ai-plus
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from iblai.models.provider05c_enum import Provider05cEnum
from typing import Optional, Set
from typing_extensions import Self

class PatchedBotCreate(BaseModel):
    """
    PatchedBotCreate
    """ # noqa: E501
    id: Optional[StrictInt] = None
    name: Optional[Annotated[str, Field(strict=True, max_length=255)]] = None
    provider: Optional[Provider05cEnum] = None
    is_configured: Optional[StrictBool] = None
    webhook_url: Optional[StrictStr] = None
    discord_config: Optional[StrictInt] = None
    webex_config: Optional[StrictInt] = None
    whatsapp_config: Optional[StrictInt] = None
    teams_config: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["id", "name", "provider", "is_configured", "webhook_url", "discord_config", "webex_config", "whatsapp_config", "teams_config"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PatchedBotCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "is_configured",
            "webhook_url",
            "discord_config",
            "webex_config",
            "whatsapp_config",
            "teams_config",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PatchedBotCreate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "provider": obj.get("provider"),
            "is_configured": obj.get("is_configured"),
            "webhook_url": obj.get("webhook_url"),
            "discord_config": obj.get("discord_config"),
            "webex_config": obj.get("webex_config"),
            "whatsapp_config": obj.get("whatsapp_config"),
            "teams_config": obj.get("teams_config")
        })
        return _obj


