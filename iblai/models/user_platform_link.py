# coding: utf-8

"""
    ibl-data-manager

    API for iblai

    The version of the OpenAPI document: 3.54.3-ai-plus
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UserPlatformLink(BaseModel):
    """
    UserPlatformLink
    """ # noqa: E501
    user_id: StrictInt
    username: StrictStr
    email: StrictStr
    user_active: StrictBool
    key: StrictStr
    org: StrictStr
    lms_url: StrictStr
    cms_url: StrictStr
    portal_url: StrictStr
    is_admin: Optional[StrictBool] = None
    is_staff: Optional[StrictBool] = None
    added_on: Optional[datetime] = None
    expired_on: Optional[datetime] = None
    public: StrictStr
    active: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["user_id", "username", "email", "user_active", "key", "org", "lms_url", "cms_url", "portal_url", "is_admin", "is_staff", "added_on", "expired_on", "public", "active"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserPlatformLink from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "public",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if added_on (nullable) is None
        # and model_fields_set contains the field
        if self.added_on is None and "added_on" in self.model_fields_set:
            _dict['added_on'] = None

        # set to None if expired_on (nullable) is None
        # and model_fields_set contains the field
        if self.expired_on is None and "expired_on" in self.model_fields_set:
            _dict['expired_on'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserPlatformLink from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "user_id": obj.get("user_id"),
            "username": obj.get("username"),
            "email": obj.get("email"),
            "user_active": obj.get("user_active"),
            "key": obj.get("key"),
            "org": obj.get("org"),
            "lms_url": obj.get("lms_url"),
            "cms_url": obj.get("cms_url"),
            "portal_url": obj.get("portal_url"),
            "is_admin": obj.get("is_admin"),
            "is_staff": obj.get("is_staff"),
            "added_on": obj.get("added_on"),
            "expired_on": obj.get("expired_on"),
            "public": obj.get("public"),
            "active": obj.get("active")
        })
        return _obj


