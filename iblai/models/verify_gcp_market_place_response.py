# coding: utf-8

"""
    ibl-data-manager

    API for iblai

    The version of the OpenAPI document: 3.54.3-ai-plus
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class VerifyGCPMarketPlaceResponse(BaseModel):
    """
    VerifyGCPMarketPlaceResponse
    """ # noqa: E501
    sub: Optional[StrictStr] = ''
    aud: Optional[StrictStr] = ''
    iat: Optional[StrictStr] = ''
    exp: Optional[StrictStr] = ''
    google: Optional[Dict[str, Any]] = None
    iss: Optional[StrictStr] = ''
    redirect_to: StrictStr
    message: Optional[StrictStr] = ''
    success: Optional[StrictBool] = True
    __properties: ClassVar[List[str]] = ["sub", "aud", "iat", "exp", "google", "iss", "redirect_to", "message", "success"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VerifyGCPMarketPlaceResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "redirect_to",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VerifyGCPMarketPlaceResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sub": obj.get("sub") if obj.get("sub") is not None else '',
            "aud": obj.get("aud") if obj.get("aud") is not None else '',
            "iat": obj.get("iat") if obj.get("iat") is not None else '',
            "exp": obj.get("exp") if obj.get("exp") is not None else '',
            "google": obj.get("google"),
            "iss": obj.get("iss") if obj.get("iss") is not None else '',
            "redirect_to": obj.get("redirect_to"),
            "message": obj.get("message") if obj.get("message") is not None else '',
            "success": obj.get("success") if obj.get("success") is not None else True
        })
        return _obj


