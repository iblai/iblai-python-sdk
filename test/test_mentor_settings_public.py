# coding: utf-8

"""
    ibl-data-manager

    API for iblai

    The version of the OpenAPI document: 3.54.3-ai-plus
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from iblai.models.mentor_settings_public import MentorSettingsPublic

class TestMentorSettingsPublic(unittest.TestCase):
    """MentorSettingsPublic unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MentorSettingsPublic:
        """Test MentorSettingsPublic
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `MentorSettingsPublic`
        """
        model = MentorSettingsPublic()
        if include_optional:
            return MentorSettingsPublic(
                id = 56,
                display_name = '',
                profile_image = '',
                initial_message = '',
                suggested_message = '',
                theme = 'dark',
                user_message_color = '',
                mentor_bubble_color = '',
                align_mentor_bubble = 'left',
                mentor = '',
                mentor_slug = '',
                mentor_unique_id = '',
                metadata = None,
                mentor_visibility = None,
                enable_image_generation = True,
                enable_web_browsing = True,
                enable_code_interpreter = True,
                custom_css = '',
                allow_anonymous = True,
                mentor_description = '',
                suggested_prompts = None,
                proactive_response = '',
                greeting_method = '',
                mentor_tools = None,
                can_use_tools = True,
                llm_name = '',
                proactive_prompt = '',
                enable_memory_component = True,
                enable_email_chat = True,
                enable_spaced_repetition = True,
                enable_instruction_mode = True,
                enable_socratic_mode = True,
                is_guided_mentor = True,
                enable_guided_prompts = True,
                enable_moderation = True,
                enable_post_processing_system = True,
                enable_safety_system = True,
                forkable = True,
                forkable_with_training_data = True
            )
        else:
            return MentorSettingsPublic(
                id = 56,
                mentor = '',
                mentor_slug = '',
                mentor_unique_id = '',
                metadata = None,
                allow_anonymous = True,
                mentor_description = '',
                suggested_prompts = None,
                proactive_response = '',
                greeting_method = '',
                mentor_tools = None,
                can_use_tools = True,
                llm_name = '',
                proactive_prompt = '',
                enable_memory_component = True,
                enable_email_chat = True,
                enable_spaced_repetition = True,
                enable_instruction_mode = True,
                enable_socratic_mode = True,
                is_guided_mentor = True,
                enable_guided_prompts = True,
                enable_moderation = True,
                enable_post_processing_system = True,
                enable_safety_system = True,
                forkable = True,
                forkable_with_training_data = True,
        )
        """

    def testMentorSettingsPublic(self):
        """Test MentorSettingsPublic"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
